/*
 * Ping1d.cpp
 * A device API for the Blue Robotics Ping1d echosounder
 *
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT EDIT
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 *
 */

#include "ping-device-ping1d.h"
#include "ping-message-common.h"
#include "ping-message-ping1d.h"

Ping1d::~Ping1d() {
  if (_profile_data) {
    free(_profile_data);
  }
}

bool Ping1d::initialize(uint16_t ping_interval_ms) {
  if (!request(Ping1dId::DEVICE_ID)) {
    return false;
  }

  if (!request(CommonId::DEVICE_INFORMATION)) {
    return false;
  }

  if (!request(Ping1dId::VOLTAGE_5)) {
    return false;
  }

  if (!request(Ping1dId::PROCESSOR_TEMPERATURE)) {
    return false;
  }

  // Configure ping interval
  if (!set_ping_interval(ping_interval_ms)) {
    return false;
  }

  return true;
}

ping_message* Ping1d::request(uint16_t id, int timeout_ms) {
  ping_message m(10);
  m.set_payload_length(0);
  m.set_message_id(id);
  writeMessage(m);
  return waitMessage(id, timeout_ms);
}

void Ping1d::handleMessage(ping_message* pmsg) {
  switch (pmsg->message_id()) {
  case Ping1dId::DEVICE_ID: {
    ping1d_device_id m(*pmsg);
    _device_id = m.device_id();
  } break;

  case Ping1dId::DISTANCE: {
    ping1d_distance m(*pmsg);
    _distance          = m.distance();
    _confidence        = m.confidence();
    _transmit_duration = m.transmit_duration();
    _ping_number       = m.ping_number();
    _scan_start        = m.scan_start();
    _scan_length       = m.scan_length();
    _gain_setting      = m.gain_setting();
  } break;

  case Ping1dId::DISTANCE_SIMPLE: {
    ping1d_distance_simple m(*pmsg);
    _distance   = m.distance();
    _confidence = m.confidence();
  } break;

  case Ping1dId::FIRMWARE_VERSION: {
    ping1d_firmware_version m(*pmsg);
    _device_type            = m.device_type();
    _device_model           = m.device_model();
    _firmware_version_major = m.firmware_version_major();
    _firmware_version_minor = m.firmware_version_minor();
  } break;

  case Ping1dId::GAIN_SETTING: {
    ping1d_gain_setting m(*pmsg);
    _gain_setting = m.gain_setting();
  } break;

  case Ping1dId::GENERAL_INFO: {
    ping1d_general_info m(*pmsg);
    _firmware_version_major = m.firmware_version_major();
    _firmware_version_minor = m.firmware_version_minor();
    _voltage_5              = m.voltage_5();
    _ping_interval          = m.ping_interval();
    _gain_setting           = m.gain_setting();
    _mode_auto              = m.mode_auto();
  } break;

  case Ping1dId::MODE_AUTO: {
    ping1d_mode_auto m(*pmsg);
    _mode_auto = m.mode_auto();
  } break;

  case Ping1dId::PCB_TEMPERATURE: {
    ping1d_pcb_temperature m(*pmsg);
    _pcb_temperature = m.pcb_temperature();
  } break;

  case Ping1dId::PING_ENABLE: {
    ping1d_ping_enable m(*pmsg);
    _ping_enabled = m.ping_enabled();
  } break;

  case Ping1dId::PING_INTERVAL: {
    ping1d_ping_interval m(*pmsg);
    _ping_interval = m.ping_interval();
  } break;

  case Ping1dId::PROCESSOR_TEMPERATURE: {
    ping1d_processor_temperature m(*pmsg);
    _processor_temperature = m.processor_temperature();
  } break;

  case Ping1dId::PROFILE: {
    ping1d_profile m(*pmsg);
    _distance          = m.distance();
    _confidence        = m.confidence();
    _transmit_duration = m.transmit_duration();
    _ping_number       = m.ping_number();
    _scan_start        = m.scan_start();
    _scan_length       = m.scan_length();
    _gain_setting      = m.gain_setting();
    if (m.profile_data_length() > _profile_data_length) {
      if (_profile_data) {
        free(_profile_data);
      }
      _profile_data = (uint8_t*)malloc(m.profile_data_length() * sizeof(uint8_t));
    }

    _profile_data_length = m.profile_data_length();

    for (uint16_t i = 0; i < _profile_data_length; i++) {
      _profile_data[i] = m.profile_data()[i];
    }
  } break;

  case Ping1dId::RANGE: {
    ping1d_range m(*pmsg);
    _scan_start  = m.scan_start();
    _scan_length = m.scan_length();
  } break;

  case Ping1dId::SPEED_OF_SOUND: {
    ping1d_speed_of_sound m(*pmsg);
    _speed_of_sound = m.speed_of_sound();
  } break;

  case Ping1dId::TRANSMIT_DURATION: {
    ping1d_transmit_duration m(*pmsg);
    _transmit_duration = m.transmit_duration();
  } break;

  case Ping1dId::VOLTAGE_5: {
    ping1d_voltage_5 m(*pmsg);
    _voltage_5 = m.voltage_5();
  } break;

  default:
    break;
  }
}

bool Ping1d::set_device_id(uint8_t device_id, bool verify) {
  ping1d_set_device_id m;
  m.set_device_id(device_id);
  writeMessage(m);
  if (!request(Ping1dId::DEVICE_ID)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_device_id != device_id)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_gain_setting(uint8_t gain_setting, bool verify) {
  ping1d_set_gain_setting m;
  m.set_gain_setting(gain_setting);
  writeMessage(m);
  if (!request(Ping1dId::GAIN_SETTING)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_gain_setting != gain_setting)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_mode_auto(uint8_t mode_auto, bool verify) {
  ping1d_set_mode_auto m;
  m.set_mode_auto(mode_auto);
  writeMessage(m);
  if (!request(Ping1dId::MODE_AUTO)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_mode_auto != mode_auto)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_ping_enable(uint8_t ping_enabled, bool verify) {
  ping1d_set_ping_enable m;
  m.set_ping_enabled(ping_enabled);
  writeMessage(m);
  if (!request(Ping1dId::PING_ENABLE)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_ping_enabled != ping_enabled)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_ping_interval(uint16_t ping_interval, bool verify) {
  ping1d_set_ping_interval m;
  m.set_ping_interval(ping_interval);
  writeMessage(m);
  if (!request(Ping1dId::PING_INTERVAL)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_ping_interval != ping_interval)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_range(uint32_t scan_start, uint32_t scan_length, bool verify) {
  ping1d_set_range m;
  m.set_scan_start(scan_start);
  m.set_scan_length(scan_length);
  writeMessage(m);
  if (!request(Ping1dId::RANGE)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_scan_start != scan_start || _scan_length != scan_length)) {
    return false; // device reply does not match
  }
  return true; // success
}

bool Ping1d::set_speed_of_sound(uint32_t speed_of_sound, bool verify) {
  ping1d_set_speed_of_sound m;
  m.set_speed_of_sound(speed_of_sound);
  writeMessage(m);
  if (!request(Ping1dId::SPEED_OF_SOUND)) {
    return false; // no reply from device
  }
  // Read back the data and check that changes have been applied
  if (verify && (_speed_of_sound != speed_of_sound)) {
    return false; // device reply does not match
  }
  return true; // success
}
