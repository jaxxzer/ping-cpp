/*
 * A device API for the Blue Robotics Ping Echosounder
 *
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT EDIT
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 *
 */

#pragma once

#include <ping-device.h>

class Ping1d : public PingDevice
{
public:
  /**
   *  @brief Constructor
   *
   *  @param ser: The device I/O
   */
  Ping1d(PingPort& port) : PingDevice(port) {}

  /**
   * @brief Destructor
   */
  ~Ping1d();

  /**
   *  @brief Establish communications with the device, and initialize the update interval
   *
   *  @param pingIntervalMs: The interval (in milliseconds) between acoustic measurements
   *
   *  @return true if the device was initialized successfully
   */
  bool initialize(uint16_t pingIntervalMs = 50);

  /**
   * @brief Set the device ID.
   *
   * @param device_id - Device ID (0-254). 255 is reserved for broadcast messages.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_device_id(uint8_t device_id, bool verify = true);

  /**
   * @brief Set the scan range for acoustic measurements.
   *
   * @param scan_start - Units: mm; 
   * @param scan_length - Units: mm; The length of the scan range.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_range(uint32_t scan_start, uint32_t scan_length, bool verify = true);

  /**
   * @brief Set the speed of sound used for distance calculations.
   *
   * @param speed_of_sound - Units: mm/s; The speed of sound in the measurement medium. ~1,500,000 mm/s for water.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_speed_of_sound(uint32_t speed_of_sound, bool verify = true);

  /**
   * @brief Set automatic or manual mode. Manual mode allows for manual selection of the gain and scan range.
   *
   * @param mode_auto - 0: manual mode. 1: auto mode.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_mode_auto(uint8_t mode_auto, bool verify = true);

  /**
   * @brief The interval between acoustic measurements.
   *
   * @param ping_interval - Units: ms; The interval between acoustic measurements.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_ping_interval(uint16_t ping_interval, bool verify = true);

  /**
   * @brief Set the current gain setting.
   *
   * @param gain_setting - The current gain setting. 0: 0.6, 1: 1.8, 2: 5.5, 3: 12.9, 4: 30.2, 5: 66.1, 6: 144
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_gain_setting(uint8_t gain_setting, bool verify = true);

  /**
   * @brief Enable or disable acoustic measurements.
   *
   * @param ping_enabled - 0: Disable, 1: Enable.
   *
   * @return when verify = false: true if a valid reply is received from the device.
   * @return when verify = true: true if a valid reply is received from the
   * device, and the values in the reply match the values that we applied
   */
  bool set_ping_enable(uint8_t ping_enabled, bool verify = true);

  // The 5V rail voltage.
  uint16_t voltage_5 = 0;

  // The speed of sound in the measurement medium. ~1,500,000 mm/s for water.
  uint32_t speed_of_sound = 0;

  // The beginning of the scan range in mm from the transducer.
  uint32_t scan_start = 0;

  // The length of the scan range.
  uint32_t scan_length = 0;

  // 0: manual mode, 1: auto mode
  uint8_t mode_auto = 0;

  // The minimum interval between acoustic measurements. The actual interval may be longer.
  uint16_t ping_interval = 0;

  // The current gain setting. 0: 0.6, 1: 1.8, 2: 5.5, 3: 12.9, 4: 30.2, 5: 66.1, 6: 144
  uint32_t gain_setting = 0;

  // Acoustic pulse duration.
  uint16_t transmit_duration = 0;

  // Distance to the target.
  uint32_t distance = 0;

  // Confidence in the distance measurement.
  uint8_t confidence = 0;

  // The pulse/measurement count since boot.
  uint32_t ping_number = 0;

  // The temperature in centi-degrees Centigrade (100 * degrees C).
  uint16_t processor_temperature = 0;

  // The temperature in centi-degrees Centigrade (100 * degrees C).
  uint16_t pcb_temperature = 0;

  // The state of the acoustic output. 0: disabled, 1:enabled
  uint8_t ping_enabled = 0;

  // An array of return strength measurements taken at regular intervals across the scan region.
  uint16_t profile_data_length = 0;
  uint8_t* profile_data = 0;


private:
  /**
   *  @brief Handle an incoming message from the device. Internal values are updated according to the device data.
   *
   *  @param message: A pointer to the message received from the device
   */
  void _handleMessage(ping_message* message);
};