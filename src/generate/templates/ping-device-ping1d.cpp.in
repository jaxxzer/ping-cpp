/*
* A device API for the Blue Robotics Ping Echosounder
*
*~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
* THIS IS AN AUTOGENERATED FILE
* DO NOT EDIT
*~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
*
*/

#include "ping-device-ping1d.h"
#include "ping-message-common.h"
#include "ping-message-ping1d.h"

Ping1d::~Ping1d()
{
{% for msg in messages["get"]|sort %}
{% for field in messages["get"][msg].payload %}
{% if generator.is_vector(field.type) %}
    if (_{{field.name}}) {
       free(_{{field.name}});
    }
{% endif %}
{% endfor %}
{% endfor %}
}

bool Ping1d::initialize(uint16_t pingIntervalMs)
{
    if (!PingDevice.initialize()) {
        return false;
    }

    // Configure ping interval
    if (!set_ping_interval(pingIntervalMs)) {
        return false;
    }

    return true;
}

void Ping1d::_handleMessage(ping_message* message)
{
    switch (message->message_id()) {
{% for msg in messages["get"]|sort %}
        case Ping1dId::{{msg|upper}}:
        {
            ping1d_{{msg}}* msg = static_cast<ping1d_{{msg}}*>(message);
{% for field in messages["get"][msg].payload %}
{% if generator.is_vector(field.type) %}
            if (msg->{{field.name}}_length() > _{{field.name}}_length) {
                if (_{{field.name}}) {
                    free(_{{field.name}});
                }
                _{{field.name}} = ({{generator.get_type_string(field.vector.datatype)}}*)malloc(msg->{{field.name}}_length() * sizeof({{generator.get_type_string(field.vector.datatype)}}));
            }

            _{{field.name}}_length = msg->{{field.name}}_length();

            for (uint16_t i = 0; i < _{{field.name}}_length; i++) {
                _{{field.name}}[i] = msg->{{field.name}}()[i];
            }
{% else %}
            _{{field.name}} = msg->{{field.name}}();
{% endif %}
{% endfor %}
        }
            break;

{% endfor %}

        default:
            break;
    }
}

{% for msg in messages["set"]|sort %}
bool Ping1d::{{msg}}({% for field in messages["set"][msg].payload %}{{generator.get_type_string(field.type)}} {{field.name}}, {% endfor %}bool verify)
{
    ping1d_{{msg}} msg;
{% for field in messages["set"][msg].payload %}
    msg.set_{{field.name}}({{field.name}});
{% endfor %}
    writeMessage(msg);
    if (!request(Ping1dId::{{msg|replace("set_", "")|upper}})) {
        return false; // no reply from device
    }
    // Read back the data and check that changes have been applied
    if (verify
{% if messages["set"][msg].payload %}
        && ({% for field in messages["set"][msg].payload %}_{{field.name}} != {{field.name}}{{ "\n        || " if not loop.last }}{% endfor %})) {
{% endif %}
        return false; // device reply does not match
    }
    return true; // success
}

{% endfor %}
